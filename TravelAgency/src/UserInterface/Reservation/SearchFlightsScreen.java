/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Reservation;

import UserInterface.Airliner.*;
import Business.Airliner.Airliner;
import Business.Airliner.Airplane;
import Business.Airliner.Flight;
import Business.TravelAgency.TravelAgency;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TeamCodeHater
 */
public class SearchFlightsScreen extends javax.swing.JPanel {

    private JPanel rightPanel;
    private TravelAgency agency;
    private String srcName;

    /**
     * Creates new form AgentMainScreen
     */
    public SearchFlightsScreen(JPanel rightPanel, TravelAgency agency,String srcPanel) {
        initComponents();
        this.rightPanel = rightPanel;
        this.agency = agency;
        this.srcName=srcPanel;
        this.populate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabProducts = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        btnSelect = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtArrLoc = new javax.swing.JTextField();
        txtDepLoc = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        boxPreferTime = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        btnBack.setText("<back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tabProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Flight Number", "Date", "Departure Time", "Arrival Time", "FromTo", "Airliner"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabProducts);

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblTitle.setText("Search for flights");

        btnSelect.setText("Select");
        btnSelect.setToolTipText("");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        jLabel2.setText("Date(MM/dd/yy)");

        jLabel4.setText("Departure Location*");

        jLabel3.setText("Departure Time*");

        jLabel6.setText("Arrival Location*");

        boxPreferTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "morning", "day", "evening" }));

        btnSearch.setText("Search");
        btnSearch.setToolTipText("");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel5.setText("(Items with * must be filled, other optional)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTitle)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtDepLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtArrLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(boxPreferTime, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1))
                                .addGap(2, 2, 2)))))
                .addGap(42, 50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDepLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtArrLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(boxPreferTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSelect)
                .addGap(58, 58, 58))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) this.rightPanel.getLayout();
        this.rightPanel.remove(this);
        layout.show(rightPanel, srcName);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:
        int selectedRow = tabProducts.getSelectedRow();

        if (selectedRow >= 0) {
            Flight info = (Flight) tabProducts.getValueAt(selectedRow, 0);
            BookFlightScreen view = new BookFlightScreen(this.rightPanel, this.agency, info);
            this.rightPanel.add("BookFlightScreen", view);
            CardLayout layout = (CardLayout) this.rightPanel.getLayout();
            layout.next(this.rightPanel);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row.");
        }
        

    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String depLoc = this.txtDepLoc.getText();
        String arrLoc = this.txtArrLoc.getText();
        String preferredTime = this.boxPreferTime.getSelectedItem().toString();
        String date = this.txtDate.getText();

        if (depLoc == null || arrLoc == null || depLoc.equals("") || arrLoc.equals("")) {
            JOptionPane.showMessageDialog(null, "Items with * are required!");
            return;
        }
        if (date == null || date.equals("")) {
            ArrayList<Flight> results = this.agency.searchFlightByPreferredTimeAndLoc(preferredTime, depLoc, arrLoc);
            this.populate(results);
        } else {
            Date d = null;
            try {
                SimpleDateFormat formatterDay = new SimpleDateFormat("MM/dd/yy");
                d = formatterDay.parse(date);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid DATE/TIME format!");
                return;
            }
            ArrayList<Flight> results = this.agency.searchFlight(preferredTime,depLoc, arrLoc, d);
            this.populate(results);
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    public void populate() {
        DefaultTableModel dtm = (DefaultTableModel) tabProducts.getModel();
        dtm.setRowCount(0);
        for (Airliner airliner : this.agency.getAirlinerDir().getAirlinerList()) {
            for (Flight i : airliner.getSchedule().getFlights()) {
                Object row[] = new Object[6];
                row[0] = i;
                SimpleDateFormat formatterDay = new SimpleDateFormat("MM/dd/yy");
                SimpleDateFormat formatterTimeOfDay = new SimpleDateFormat("HH:mm:ss");
                row[1] = formatterDay.format(i.getFlightDate());
                row[2] = formatterTimeOfDay.format(i.getDepartureTime());
                row[3] = formatterTimeOfDay.format(i.getArrivalTime());
                row[4] = i.getDepartureLoc() + "-" + i.getArrivalLoc();
                row[5] = airliner.getAirlinerName();
                dtm.addRow(row);
            }
        }
    }

    public void populate(ArrayList<Flight> flights) {
        DefaultTableModel dtm = (DefaultTableModel) tabProducts.getModel();
        dtm.setRowCount(0);
        for (Flight i : flights) {
            Object row[] = new Object[6];
            row[0] = i;
            SimpleDateFormat formatterDay = new SimpleDateFormat("MM/dd/yy");
            SimpleDateFormat formatterTimeOfDay = new SimpleDateFormat("HH:mm:ss");
            row[1] = formatterDay.format(i.getFlightDate());
            row[2] = formatterTimeOfDay.format(i.getDepartureTime());
            row[3] = formatterTimeOfDay.format(i.getArrivalTime());
            row[4] = i.getDepartureLoc() + "-" + i.getArrivalLoc();
            row[5] = this.agency.getAirlinerNameByFlight(i);
            dtm.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxPreferTime;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelect;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tabProducts;
    private javax.swing.JTextField txtArrLoc;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtDepLoc;
    // End of variables declaration//GEN-END:variables
}
